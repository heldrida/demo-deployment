Conditions:
  IsProd: !Equals
    - !Ref 'StackEnv'
    - PROD
  RdsClientSg1Condition: !Not
    - !Equals
      - !Ref 'RdsClientSg1'
      - NONE
  RdsClientSg2Condition: !Not
    - !Equals
      - !Ref 'RdsClientSg2'
      - NONE
  RestoreSnapshot: !Not
    - !Equals
      - !Ref 'ExistingDbSnapshot'
      - NONE
Description: RDS stack (MariaDB)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: RDS
        Parameters:
          - DbMasterUser
          - ExistingDbSnapshot
          - RdsClientSg1
          - RdsClientSg2
      - Label:
          default: Dependent stacks
        Parameters:
          - DatadogStack
          - EncryptLambdaStack
          - NetworkStack
Outputs:
  RdsDatabaseDatabaseURI:
    Description: RDS URI
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseURI'
    Value: !Join
      - ':'
      - - !GetAtt 'RdsDatabase.Endpoint.Address'
        - !GetAtt 'RdsDatabase.Endpoint.Port'
Parameters:
  AllocatedStorage:
    Default: '100'
    Description: Minimum 100
    Type: String
  DatadogStack:
    Default: NONE
    Description: Datadog stack name
    Type: String
  DbMasterUser:
    AllowedPattern: ^.+$
    Default: admin
    Description: DB Master Username
    Type: String
  DbPassword:
    Description: Password
    NoEcho: true
    Type: String
  EncryptLambdaStack:
    AllowedPattern: ^.+$
    Default: NONE
    Description: Encrypt Lambda function stack name
    Type: String
  ExistingDbSnapshot:
    AllowedPattern: ^.+$
    Default: NONE
    Description: Existing DB snapshot to restore (NONE to create a new snapshot)
    Type: String
  NetworkStack:
    AllowedPattern: ^.+$
    Default: NONE
    Description: Network stack name
    Type: String
  RdsClientSg1:
    AllowedPattern: ^.+$
    Default: NONE
    Description: 'Optional: Client SG to allow access to this RDS (NONE for default)'
    Type: String
  RdsClientSg2:
    AllowedPattern: ^.+$
    Default: NONE
    Description: 'Optional: Client SG to allow access to this RDS (NONE for default)'
    Type: String
  StackEnv:
    AllowedValues:
      - PROD
      - UAT
      - OTHER
    Default: OTHER
    Description: Environment type (PROD/UAT/OTHER)
    Type: String
Resources:
  9ad5857b0665405d990d08acc6a8b5c1:
    Type: AWS::CloudFormation::WaitConditionHandle
  DatadogRdsCpuUtilizationAlert:
    Condition: IsProd
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${DatadogStack}-LambdaArn
      message: CPU Utilization on RDS cluster is higher than 90% during the last 15
        minutes @pagerduty-NHMediaDatadog
      name: RDS CPU Utilization Alert ( CFN )
      options:
        escalation_message: ''
        evaluation_delay: '900'
        include_tags: 'false'
        locked: 'false'
        new_host_delay: 300
        no_data_timeframe: 10
        notify_audit: 'false'
        notify_no_data: 'true'
        renotify_interval: '0'
        thresholds:
          critical: 90
        timeout_h: 0
      query: !Sub 'min(last_15m):avg:aws.rds.cpuutilization{dbclusteridentifier:${RdsDatabase}}
        >= 90'
    Type: Custom::DataDogMetricAlert
  DatadogRdsCpuUtilizationWarning:
    Condition: IsProd
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${DatadogStack}-LambdaArn
      message: CPU Utilization on RDS cluster is higher than 75% during the last 15
        minutes @pagerduty-NHMedia-Datadog-Officehours
      name: RDS CPU Utilization Warning ( CFN )
      options:
        escalation_message: ''
        evaluation_delay: '900'
        include_tags: 'false'
        locked: 'false'
        new_host_delay: 300
        no_data_timeframe: 10
        notify_audit: 'false'
        notify_no_data: 'true'
        renotify_interval: '0'
        thresholds:
          critical: 90
          warning: 75
        timeout_h: 0
      query: !Sub 'min(last_15m):avg:aws.rds.cpuutilization{dbclusteridentifier:${RdsDatabase}}
        >= 90'
    Type: Custom::DataDogMetricAlert
  EnhancedMonitoringRole:
    Condition: IsProd
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:PutRetentionPolicy
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn:aws:logs
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - log-group
                      - RDS*
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn:aws:logs
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - log-group
                      - RDS*
                      - log-stream
                      - '*'
            Version: '2012-10-17'
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - service-policy
    Type: AWS::IAM::Role
  RDSParamGroup:
    Properties:
      Description: RDS Parameter Group
      Family: mariadb10.1
    Type: AWS::RDS::DBParameterGroup
  RdsDatabase:
    Properties:
      AllocatedStorage: !Ref 'AllocatedStorage'
      AllowMajorVersionUpgrade: 'false'
      AutoMinorVersionUpgrade: 'true'
      DBInstanceClass: !If
        - IsProd
        - db.m4.large
        - db.t2.medium
      DBParameterGroupName: !Ref 'RDSParamGroup'
      DBSnapshotIdentifier: !If
        - RestoreSnapshot
        - !Ref 'ExistingDbSnapshot'
        - !Ref 'AWS::NoValue'
      DBSubnetGroupName: !ImportValue
        Fn::Sub: ${NetworkStack}-DbSubnetGroupDBPrivate
      Engine: mariadb
      MasterUserPassword: !If
        - RestoreSnapshot
        - !Ref 'AWS::NoValue'
        - !Ref 'DbPassword'
      MasterUsername: !If
        - RestoreSnapshot
        - !Ref 'AWS::NoValue'
        - !Ref 'DbMasterUser'
      MonitoringInterval: !If
        - IsProd
        - 60
        - !Ref 'AWS::NoValue'
      MonitoringRoleArn: !If
        - IsProd
        - !GetAtt 'EnhancedMonitoringRole.Arn'
        - !Ref 'AWS::NoValue'
      MultiAZ: !If
        - IsProd
        - 'True'
        - 'False'
      StorageEncrypted: 'false'
    Type: AWS::RDS::DBInstance
  SgClient:
    Properties:
      GroupDescription: !Sub 'Security group for RDS client created by ${AWS::StackName}'
      VpcId: !ImportValue
        Fn::Sub: ${NetworkStack}-Vpc
    Type: AWS::EC2::SecurityGroup
  SgDbRDS:
    Properties:
      GroupDescription: !Sub 'Security group for RDS created by ${AWS::StackName}'
      SecurityGroupIngress:
        - FromPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'SgClient'
          ToPort: 3306
        - !If
          - RdsClientSg1Condition
          - FromPort: 3306
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref 'RdsClientSg1'
            ToPort: 3306
          - !Ref 'AWS::NoValue'
        - !If
          - RdsClientSg2Condition
          - FromPort: 3306
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref 'RdsClientSg2'
            ToPort: 3306
          - !Ref 'AWS::NoValue'
        - CidrIp: !ImportValue
            Fn::Sub: ${NetworkStack}-CidrVpc
          FromPort: '3306'
          IpProtocol: '6'
          ToPort: '3306'
      VpcId: !ImportValue
        Fn::Sub: ${NetworkStack}-Vpc
    Type: AWS::EC2::SecurityGroup

