# Set the following environment variables in the bitbucket pipelines settings:
#  AWS_ACCESS_KEY_ID
#  AWS_SECRET_ACCESS_KEY
#  AWS_ACCOUNT_ID
#  AWS_DEFAULT_REGION
#  IMAGE_NAME
#  HEALTHCHECKPATH
#  AUTOSCALINGMAX
#  AUTOSCALINGMIN
#  SERVICEPATH
#  SERVICEHOST
#  CONTAINERPORT
#  CERTIFICATEARN  # Set to "NONE" if not needed. Only if you use HTTPS in the ALBSTACK #
#  STACKENV  # PROD, UAT, OTHER #
#  SUMO_URL
#
# For multiple environments in the same pipeline, create multiple variables and
# add "ENV_" in front of the variable such as: TEST_AWS_ACCESS_KEY_ID
#
# Copy the task-definition from ./ci/task-definitions/demo.json to
# ./ci/task/definitions/$IMAGE_NAME.json and change the it to fit your purposes.
#
#image:
#  name: 145601632047.dkr.ecr.eu-west-1.amazonaws.com/bitbucketbuild
#  aws:
#    access-key: $AWS_ACCESS_KEY_ID
#    secret-key: $AWS_SECRET_ACCESS_KEY
#
# For more release strategies (tags, branches) and other workflows (parallel):
# https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html

image: atlassian/default-image:2
pipelines:
  default:
  - step:
      name: Default
      script:
      - echo "Default step"
  - step:
      name: Push to dev
      deployment: test
      services:
      - docker
      caches:
      - docker
      script:
      - export ENVIRONMENT="dev"
      - #export AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY && export $AWS_ACCOUNT_ID=$TEST_$AWS_ACCOUNT_ID
      - chmod +x ci/scripts/*
      - # Install build pre-requirements
      - ci/scripts/build_requirements.sh
      - # Check if any templates need to be deployed
      - ci/scripts/deploy_templates.sh
      - # Build, tag and push the docker image
      - DOCKERTAG=$(echo $BITBUCKET_BUILD_NUMBER | sed 's/://')
      # Use envsubst to get environment variables into the docker container
      - docker build -f <(envsubst < Dockerfile) -t $IMAGE_NAME:${DOCKERTAG} .
      #- docker build -t $IMAGE_NAME:${DOCKERTAG} -f DockerfileWithEnv .
      - rm DockerfileWithEnv
      # Log into ECR
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo "Currently building $IMAGE_NAME:$DOCKERTAG"
      - REPOSITORY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$DOCKERTAG"
      - docker tag $IMAGE_NAME:$DOCKERTAG $REPOSITORY
      - docker push $REPOSITORY
      - export DOCKER_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$DOCKERTAG"
      - # Deploy the docker image in ECS
      - TASK_NAME=$IMAGE_NAME ci/scripts/update_task.sh
  - step:
      name: Push to test
      deployment: staging
      trigger: manual
      services:
      - docker
      caches:
      - docker
      script:
      - export ENVIRONMENT="test"
      - export AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY && export $AWS_ACCOUNT_ID=$TEST_$AWS_ACCOUNT_ID
      - chmod +x ci/scripts/*
      - # Install build pre-requirements
      - ci/scripts/build_requirements.sh
      - # Check if any templates need to be deployed
      - ci/scripts/deploy_templates.sh
      - # Build, tag and push the docker image
      - DOCKERTAG=$(echo $BITBUCKET_BUILD_NUMBER | sed 's/://')
      - docker build -t $IMAGE_NAME:${DOCKERTAG} .
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo "Currently building $IMAGE_NAME:$DOCKERTAG"
      - REPOSITORY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$DOCKERTAG"
      - docker tag $IMAGE_NAME:$DOCKERTAG $REPOSITORY
      - docker push $REPOSITORY
      - export DOCKER_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$DOCKERTAG"
      - # Deploy the docker image in ECS
      - TASK_NAME=$IMAGE_NAME ci/scripts/update_task.sh
  - step:
      name: Push to prod
      deployment: production
      trigger: manual
      services:
      - docker
      caches:
      - docker
      script:
      - export ENVIRONMENT="prod"
      - export AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY && export $AWS_ACCOUNT_ID=$PROD_$AWS_ACCOUNT_ID
      - chmod +x ci/scripts/*
      - # Install build pre-requirements
      - ci/scripts/build_requirements.sh
      - # Check if any templates need to be deployed
      - ci/scripts/deploy_templates.sh
      - # Build, tag and push the docker image
      - DOCKERTAG=$(echo $BITBUCKET_BUILD_NUMBER | sed 's/://')
      - docker build -t $IMAGE_NAME:${DOCKERTAG} .
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo "Currently building $IMAGE_NAME:$DOCKERTAG"
      - REPOSITORY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$DOCKERTAG"
      - docker tag $IMAGE_NAME:$DOCKERTAG $REPOSITORY
      - docker push $REPOSITORY
      - export DOCKER_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAME:$DOCKERTAG"
      - # Deploy the docker image in ECS
      - TASK_NAME=$IMAGE_NAME ci/scripts/update_task.sh
options:
  docker: true